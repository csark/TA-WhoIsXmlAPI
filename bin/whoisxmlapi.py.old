#!/usr/bin/env python

import sys

from splunklib.searchcommands import Configuration
from splunklib.searchcommands import dispatch
from splunklib.searchcommands import StreamingCommand
from splunklib.searchcommands import Option
from splunklib.searchcommands import validators

import urllib, urllib2
import json
import itertools

import wxa

@Configuration()
class whoisxmlapiCommand(StreamingCommand):

    def stream(self, records):
        self.logger.debug('CountMatchesCommand: %s', self)  # logs command line

        storage_passwords=self.service.storage_passwords

        # need to handle a missing key gracefully
        try:
            retrievedCredential = [k for k in storage_passwords if k.content.get('username')=='whoisxmlapi_api_key'][0]

        except Exception, e:
            error = "error retrieving API key - is it defined?: %s " % ( e )
            for record in records:
                record["error"] = error
                yield record
            return


        api_key = retrievedCredential.content.get('clear_password')

        # build a unique list of domains

        domains = {}
        
        # THIS ISN'T WORKING as the list(records) iterates over the iterator (which can't be iterated through again)
        data = list(records)
        for d in data:
            domains[d['domain']] = 1

        for record in records:
            record["howdy"] = "what?" + api_key
            yield record


        j = {}
        #j['apiKey'] = 'at_wl9FLGub0XShvCEzJgajDpPV9JyeI'
        j['apiKey'] = api_key
        j['domains'] = domains.keys()
        j['outputFormat'] = 'JSON'


        # do query using the wxa module (which will handle paging, waiting, looping)

        # FAKE DATA
        results = {'google.com':'Alphabet'}
        for record in records:
            record["howdy"] = "what?" + record['domain']
            yield record
        #return

        # iterate through each record, adding the required fields

        for record in records:
            count = 0
            domain = str(record["domain"])
            if domain in results:
                record["whois_info"] = results[domain]
            else:
                record["whois_info"] = "no_luck"
            yield record

dispatch(whoisxmlapiCommand, sys.argv, sys.stdin, sys.stdout, __name__)
